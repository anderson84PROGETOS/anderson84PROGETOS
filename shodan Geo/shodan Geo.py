import requests

print("""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
""")

def obter_informacoes_geonet(website):
    url = f"https://geonet.shodan.io/api/geoping/{website}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
        'Accept-Language': 'en-US,en;q=0.5',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
    }
    try:
        resposta = requests.get(url, headers=headers)
        resposta.raise_for_status()  # Lan√ßa uma exce√ß√£o se a resposta HTTP for um erro
        dados = resposta.json()  # Converte a resposta JSON em um dicion√°rio Python
        return dados
    except requests.exceptions.RequestException as e:
        print(f"\nErro ao fazer a solicita√ß√£o: {e}")
        return None

def formatar_informacoes(dados):
    if isinstance(dados, list) and len(dados) > 0:
        informacoes_formatadas = ""
        cidades_brasileiras = [
            "S√£o Paulo", "Rio de Janeiro", "Bras√≠lia", "Salvador",
            "Fortaleza", "Belo Horizonte", "Curitiba", "Recife",
            "Porto Alegre", "Manaus"
        ]
        for info in dados:
            latlon = info.get('from_loc', {}).get('latlon', 'N/A')
            latitude, longitude = latlon.split(',') if latlon != 'N/A' else ('N/A', 'N/A')
            maps_url = f"https://www.google.com/maps?q={latitude},{longitude}" if latitude != 'N/A' and longitude != 'N/A' else 'N/A'
            street_view_url = f"https://www.google.com/maps/@?api=1&map_action=pano&viewpoint={latitude},{longitude}&heading=-45&pitch=38&fov=80" if latitude != 'N/A' and longitude != 'N/A' else 'N/A'
            formatted_info = (
                f"IP: {info.get('ip', 'N/A')}\n\n"
                f"Est√° Vivo: {'Sim' if info.get('is_alive', False) else 'N√£o'}\n"
                f"RTT M√≠nimo: {info.get('min_rtt', 'N/A')} ms\n"
                f"RTT M√©dio: {info.get('avg_rtt', 'N/A')} ms\n"
                f"RTT M√°ximo: {info.get('max_rtt', 'N/A')} ms\n"
                f"Pacotes Enviados: {info.get('packets_sent', 'N/A')}\n"
                f"Pacotes Recebidos: {info.get('packets_received', 'N/A')}\n"
                f"Perda de Pacotes: {info.get('packet_loss', 'N/A') * 100}%\n"
                f"\nCidade: {info.get('from_loc', {}).get('city', 'N/A')}\n"
                f"Pa√≠s: {info.get('from_loc', {}).get('country', 'N/A')}\n"
                f"Latitude: {latitude}\n"
                f"Longitude: {longitude}\n"
                f"\nURL do Google Maps: {maps_url}\n"
                f"\nGoogle Maps (Street View): {street_view_url}\n"
                f"\n==================================\n"
            )
            # Exibir mensagem se o pa√≠s for Brasil ou se a cidade for uma das listadas
            if info.get('from_loc', {}).get('country') in ['Brazil', 'Brasil']:
                formatted_info += "Esta localiza√ß√£o est√° no Brasil! üáßüá∑\n"
                cidade = info.get('from_loc', {}).get('city', 'N/A')
                if cidade in cidades_brasileiras:
                    formatted_info += f"A cidade {cidade} √© uma das cidades brasileiras listadas! üåü\n"
            informacoes_formatadas += formatted_info
        return informacoes_formatadas
    return "\nNenhuma informa√ß√£o dispon√≠vel."

def main():
    website = input("\nDigite o nome do website: ")
    dados = obter_informacoes_geonet(website)
    informacoes_formatadas = formatar_informacoes(dados)
    print("\n\nInforma√ß√µes Website\n")
    print(informacoes_formatadas)

if __name__ == "__main__":
    main()

input("\n\nPRESSIONE ENTER PARA SAIR\n=========================\n\n")
